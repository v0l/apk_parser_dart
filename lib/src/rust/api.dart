// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.7.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ApkParser>>
abstract class ApkParser implements RustOpaqueInterface {
  AndroidManifestParsed loadManifest();

  factory ApkParser({required String path}) =>
      RustLib.instance.api.crateApiApkParserNew(path: path);
}

class AndroidManifestParsed {
  final String? package;
  final int? versionCode;
  final String? versionName;
  final int? compileSdkVersion;
  final int? compileSdkVersionCodename;
  final int? platformBuildVersionCode;
  final int? platformBuildVersionName;
  final int? minSdkVersion;
  final int? targetSdkVersion;
  final int? maxSdkVersion;
  final String? icon;
  final String? label;
  final List<ApkSignature> sigs;

  const AndroidManifestParsed({
    this.package,
    this.versionCode,
    this.versionName,
    this.compileSdkVersion,
    this.compileSdkVersionCodename,
    this.platformBuildVersionCode,
    this.platformBuildVersionName,
    this.minSdkVersion,
    this.targetSdkVersion,
    this.maxSdkVersion,
    this.icon,
    this.label,
    required this.sigs,
  });

  @override
  int get hashCode =>
      package.hashCode ^
      versionCode.hashCode ^
      versionName.hashCode ^
      compileSdkVersion.hashCode ^
      compileSdkVersionCodename.hashCode ^
      platformBuildVersionCode.hashCode ^
      platformBuildVersionName.hashCode ^
      minSdkVersion.hashCode ^
      targetSdkVersion.hashCode ^
      maxSdkVersion.hashCode ^
      icon.hashCode ^
      label.hashCode ^
      sigs.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is AndroidManifestParsed &&
          runtimeType == other.runtimeType &&
          package == other.package &&
          versionCode == other.versionCode &&
          versionName == other.versionName &&
          compileSdkVersion == other.compileSdkVersion &&
          compileSdkVersionCodename == other.compileSdkVersionCodename &&
          platformBuildVersionCode == other.platformBuildVersionCode &&
          platformBuildVersionName == other.platformBuildVersionName &&
          minSdkVersion == other.minSdkVersion &&
          targetSdkVersion == other.targetSdkVersion &&
          maxSdkVersion == other.maxSdkVersion &&
          icon == other.icon &&
          label == other.label &&
          sigs == other.sigs;
}

class ApkSignature {
  final Uint8List digest;
  final List<Uint8List> certificates;
  final Uint8List signature;
  final String algo;

  const ApkSignature({
    required this.digest,
    required this.certificates,
    required this.signature,
    required this.algo,
  });

  @override
  int get hashCode =>
      digest.hashCode ^
      certificates.hashCode ^
      signature.hashCode ^
      algo.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ApkSignature &&
          runtimeType == other.runtimeType &&
          digest == other.digest &&
          certificates == other.certificates &&
          signature == other.signature &&
          algo == other.algo;
}
